---
- name: Configure awx

  hosts: awx_app

  become: yes

  vars:

    awx_cli_conf: ~/.tower_cli.cfg
    awx_nolog: yes

  collections:

    - awx.awx

  roles:

    - nephelaiio.plugins

  pre_tasks:

    - block:

        - name: initialize variables
          set_fact:
            _awx_template_vars: "{{ query('varnames', '^awx_templates_' + (awx_group | default('.*')) + '$') }}"
            _awx_workflow_vars: "{{ query('varnames', '^awx_workflows_' + (awx_group | default('.*')) + '$') }}"
            _awx_schedule_vars: "{{ query('varnames', '^awx_schedules_' + (awx_group | default('.*')) + '$') }}"
            _awx_templates: []
            _awx_workflows: []
            _awx_schedules: []

        - name: gather template definitions
          set_fact:
            _awx_templates: "{{ _awx_templates + _awx_template_defs }}"
          vars:
            _awx_template_defs: "{{ query('vars', item) | flatten }}"
          loop: '{{ _awx_template_vars }}'

        - name: gather workflow definitions
          set_fact:
            _awx_workflows: "{{ _awx_workflows + _awx_workflow_defs }}"
          vars:
            _awx_workflow_defs: "{{ query('vars', item) | flatten }}"
          loop: '{{ _awx_workflow_vars }}'

        - name: gather schedule definitions
          set_fact:
            _awx_schedules: "{{ _awx_schedules + _awx_schedules_defs }}"
          vars:
            _awx_schedules_defs: "{{ query('vars', item) | flatten }}"
          loop: '{{ _awx_schedule_vars }}'

      tags:
        - always

  tasks:

    - name: set awx config url
      set_fact:
        awx_local_url: "http://localhost:{{ awx_container_port | default('80') }}"
      when: awx_local_url is undefined

    - name: include vars files
      include_vars:
        dir: "{{ item }}"
      loop: "{{ vars_dirs | list }}"
      ignore_errors: yes
      when: vars_dirs is defined

    - name: install tower cli
      pip:
        name: ansible-tower-cli
        state: present

    - name: create tower cli configuration file
      template:
        src: tower_cli.cfg.j2
        dest: "{{ awx_cli_conf }}"
        mode: 0600
      vars:
        host: "{{ awx_local_url }}"
        username: "{{ awx_admin_user | default('admin') }}"
        password: "{{ awx_admin_pass }}"
        verify_ssl: false
        verbose: false

    - block:

        - name: manage awx settings
          tower_settings:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ item }}"
            value: "{{ awx_settings[item] | string }}"
          loop: "{{ awx_settings.keys() | list | default([]) }}"
          loop_control:
            label: "{{ item }}"
          register: settings_results
          no_log: "{{ awx_nolog }}"
          tags:
            - settings

        - name: destroy awx workflows
          workflow_job_template:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ workflow.name }}"
            organization: "{{ organization }}"
            state: absent
          vars:
            workflow: "{{ item }}"
            organization: "{{ workflow.organization }}"
          loop_control:
            label: "{{ workflow.name }}"
          loop: "{{ _awx_workflows }}"
          when:
            - workflow.state | default('present') == 'absent'
            - awx_workflow_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - workflows

        - name: destroy awx job templates
          job_template:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ template.name }}"
            state: absent
          vars:
            template: "{{ item }}"
          loop_control:
            label: "{{ template.name }}"
          loop: "{{ _awx_templates }}"
          when:
            - template.state | default('present') == 'absent'
            - awx_template_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - templates

        - name: destroy awx inventory sources
          inventory_source:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ inventory.name }}"
            inventory: "{{ inventory.name }}"
            state: absent
          vars:
            inventory: "{{ item }}"
            organization: "{{ inventory.organization }}"
          loop_control:
            label: "{{ inventory.name }}"
          loop: "{{ awx_inventories }}"
          when:
            - inventory.state | default('present') == 'absent'
            - awx_inventory_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - inventories

        - name: destroy awx inventories
          inventory:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ inventory.name }}"
            organization: "{{ organization }}"
            state: absent
          vars:
            inventory: "{{ item }}"
            organization: "{{ inventory.organization }}"
          loop_control:
            label: "{{ inventory.name }}"
          loop: "{{ awx_inventories }}"
          when:
            - inventory.state | default('present') == 'absent'
            - awx_inventory_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - inventories

        - name: destroy awx projects
          project:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ project.name }}"
            organization: "{{ organization }}"
            state: absent
          vars:
            project: "{{ item }}"
            organization: "{{ project.organization }}"
          loop_control:
            label: "{{ project.name }}"
          loop: "{{ awx_projects }}"
          when:
            - project.state | default('present') == 'absent'
            - awx_project_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - projects

        - name: destroy awx credentials
          credential:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ credential.name }}"
            organization: "{{ organization }}"
            credential_type: "{{ credential.credential_type | default(omit) }}"
            state: absent
          vars:
            credential: "{{ item }}"
            organization: "{{ credential.organization }}"
          loop_control:
            label: "{{ credential.name }}"
          loop: "{{ awx_credentials }}"
          when:
            - credential.state | default('present') == 'absent'
            - awx_credentials_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - credentials
          ignore_errors: yes

        - name: destroy awx galaxy credentials
          credential:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            organization: "{{ organization }}"
            name: "{{ galaxy_credential.name }}"
            credential_type: "{{ galaxy_credential.credential_type }}"
            state: absent
          vars:
            galaxy_credential: "{{ item }}"
            organization: "{{ galaxy_credential.organization }}"
          loop_control:
            label: "{{ galaxy_credential.name }}"
          loop: "{{ awx_galaxy_credentials | default([]) }}"
          when:
            - galaxy_credential.state | default('present') == 'absent'
            - awx_credentials_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - credentials

        - name: destroy awx instance groups
          instance_group:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ instance_group.name }}"
            state: absent
          vars:
            instance_group: "{{ item.1 }}"
          loop_control:
            label: "{{ instance_group.name }}"
          loop: "{{ awx_organizations | subelements('instance_groups', skip_missing='yes') }}"
          when:
            - instance_group.state | default('present') == 'absent'
            - awx_instance_group_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - organizations

        - name: manage awx organizations
          organization:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ organization.name }}"
            state: "{{ organization.state | default('present') }}"
          vars:
            organization: "{{ item }}"
          loop_control:
            label: "{{ organization.name }}"
          loop: "{{ awx_organizations | list }}"
          when:
            - organization.state | default('present') != 'absent'
            - awx_organization_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - organizations

        - name: create awx instance groups
          instance_group:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ instance_group.name }}"
            is_container_group: "{{ instance_group.container_group | default('omit') }}"
            pod_spec_override: "{{ instance_group.pod_spec_override | default('omit') }}"
            state: present
          vars:
            organization: "{{ item.0 }}"
            instance_group: "{{ item.1 }}"
          loop_control:
            label: "{{ instance_group.name }}"
          loop: "{{ awx_organizations | subelements('instance_groups', skip_missing='yes') }}"
          when:
            - organization.state | default('present') != 'absent'
            - instance_group.state | default('present') != 'absent'
            - awx_organization_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - organizations

        - name: associate awx instance groups
          organization:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ organization.name }}"
            instance_groups: "{{ instance_groups_target }}"
            state: present
          vars:
            organization: "{{ item }}"
            instance_groups_absent: "{{ organization.instance_groups | rejectattr('state', 'undefined') | rejectattr('state', 'equalto', 'present') | map(attribute='name') | list }}"
            instance_groups_all: "{{ organization.instance_groups | map(attribute='name') | list }}"
            instance_groups_target: "{{ instance_groups_all | difference(instance_groups_absent) }}"
          loop_control:
            label: "{{ organization.name }}"
          loop: "{{ awx_organizations | list }}"
          when:
            - organization.state | default('present') != 'absent'
            - instance_groups_target | length > 0
            - awx_organization_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - organizations

        - name: create awx galaxy credentials
          credential:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            organization: "{{ organization.name }}"
            name: "{{ galaxy_credential.name }}"
            credential_type: "{{ galaxy_credential.credential_type }}"
            inputs: "{{ galaxy_credential.inputs }}"
            state: present
          vars:
            organization: "{{ item.0 }}"
            galaxy_credential: "{{ item.1 }}"
          loop_control:
            label: "{{ galaxy_credential.name }}"
          loop: "{{ awx_organizations | subelements('galaxy_credentials', skip_missing=True) }}"
          when:
            - galaxy_credential.state | default('present') != 'absent'
            - awx_organization_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - organizations

        - name: associate awx galaxy credentials
          organization:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ organization.name }}"
            galaxy_credentials: "{{ galaxy_credentials_target }}"
            state: present
          vars:
            organization: "{{ item }}"
            galaxy_credentials_absent: "{{ organization.galaxy_credentials | rejectattr('state', 'undefined') | rejectattr('state', 'equalto', 'present') | map(attribute='name') | list }}"
            galaxy_credentials_all: "{{ organization.galaxy_credentials | map(attribute='name') | list }}"
            galaxy_credentials_target: "{{ galaxy_credentials_all | difference(galaxy_credentials_absent) }}"
          loop_control:
            label: "{{ organization.name }}"
          loop: "{{ awx_organizations | list }}"
          when:
            - organization.state | default('present') != 'absent'
            - galaxy_credentials_target | length > 0
            - awx_organization_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - organizations

        - name: manage awx teams
          team:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ team.key }}"
            organization: "{{ team.value.organization }}"
            state: "{{ team.value.state | default('present') }}"
          loop_control:
            loop_var: team
            label: "{{ team.key }}"
          loop: "{{ awx_teams }}"
          when: awx_organization_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - teams

        - name: create awx credentials
          credential:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            organization: "{{ organization }}"
            name: "{{ credential.name }}"
            credential_type: "{{ credential.credential_type }}"
            description: "{{ credential.description | default(omit) }}"
            project: "{{ credential.project | default(omit) }}"
            team: "{{ credential.team | default(omit) }}"
            inputs: "{{ credential.inputs }}"
            state: present
          vars:
            credential: "{{ item }}"
            organization: "{{ credential.organization }}"
          loop_control:
            label: "{{ credential.name }}"
          loop: "{{ awx_credentials }}"
          when:
            - credential.state | default('present') != 'absent'
            - awx_credentials_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - credentials

        - name: create awx projects
          project:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ project.name }}"
            organization: "{{ organization }}"
            description: "{{ project.description | default(omit) }}"
            scm_type: "{{ project.scm_type }}"
            scm_url: "{{ project.scm_url | default(omit) }}"
            scm_branch: "{{ project.scm_branch | default(omit) }}"
            scm_credential: "{{ project.scm_credential | default(omit) }}"
            scm_clean: "{{ project.scm_clean | default(omit) }}"
            scm_delete_on_update: "{{ project.scm_delete_on_update | default(omit) }}"
            scm_update_on_launch: "{{ project.scm_update_on_launch | default(omit) }}"
            scm_update_cache_timeout: "{{ project.scm_update_cache_timeout | default(omit) }}"
            timeout: "{{ project.job_timeout | default(omit) }}"
            state: present
          vars:
            project: "{{ item }}"
            organization: "{{ project.organization }}"
          loop_control:
            label: "{{ project.name }}"
          loop: "{{ awx_projects }}"
          when:
            - project.state | default('present') != 'absent'
            - awx_project_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - projects

        - name: create awx inventories
          inventory:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ inventory.name }}"
            organization: "{{ organization }}"
          vars:
            inventory: "{{ item }}"
            organization: "{{ inventory.organization }}"
          loop_control:
            label: "{{ inventory.name }}"
          loop: "{{ awx_inventories }}"
          when:
            - inventory.state | default('present') != 'absent'
            - awx_inventory_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - inventories

        - name: create awx inventory sources
          inventory:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ inventory.name }}"
            organization: "{{ organization }}"
          vars:
            inventory: "{{ item }}"
            organization: "{{ inventory.organization }}"
          loop_control:
            label: "{{ inventory.name }}"
          loop: "{{ awx_inventories }}"
          when:
            - inventory.state | default('present') != 'absent'
            - awx_inventory_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - inventories

        - name: create awx job templates
          job_template:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ job_template.name }}"
            project: "{{ job_template.project }}"
            playbook: "{{ job_template.playbook }}"
            inventory: "{{ job_template.inventory | default(omit) }}"
            description: "{{ job_template.description | default(omit) }}"
            allow_simultaneous: "{{ job_template.allow_simultaneous | default(omit) }}"
            ask_credential_on_launch: "{{ job_template.ask_credentials | default(omit) }}"
            ask_inventory_on_launch: "{{ job_template.ask_inventory | default(omit) }}"
            ask_limit_on_launch: "{{ job_template.ask_limit | default(omit) }}"
            ask_variables_on_launch: "{{ job_template.ask_vars | default(omit) }}"
            ask_skip_tags_on_launch: "{{ job_template.ask_skip_tags | default(omit) }}"
            ask_tags_on_launch: "{{ job_template.ask_tags | default(omit) }}"
            become_enabled: "{{ job_template.become_enabled | default(omit) }}"
            extra_vars: "{{ job_template.extra_vars | default(omit) }}"
            forks: "{{ job_template.forks | default(omit) }}"
            job_slice_count: "{{ job_template.slices | default(1) }}"
            job_tags: "{{ [job_template.job_tags | default('')] | flatten | join(',') }}"
            job_type: "{{ job_template.job_type | default('run') }}"
            limit: "{{ job_template.limit | default(omit) }}"
            skip_tags: "{{ [job_template.skip_tags | default('')] | flatten | join(',') }}"
            timeout: "{{ job_template.timeout | default(omit) }}"
            verbosity: "{{ job_template.verbosity | default(0) }}"
            credentials: "{{ job_template.credentials | default([]) | map(attribute='name') | list }}"
          vars:
            job_template: "{{ item }}"
          loop_control:
            label: "{{ job_template.name }}"
          loop: "{{ _awx_templates }}"
          when:
            - job_template.state | default('present') != 'absent'
            - awx_template_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - templates

        - name: manage awx template permissions
          role:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            job_templates:
              - "{{ job_template.name }}"
            team: "{{ permission.team }}"
            role: "{{ permission.role }}"
            state: "{{ permission.state | default('present') }}"
          vars:
            job_template: "{{ item.0 }}"
            permission: "{{ item.1 }}"
          loop_control:
            label: "{{ job_template.name }} - {{ permission.team }}"
          loop: "{{ _awx_templates | subelements('permissions', skip_missing=True) }}"
          when:
            - job_template.state | default('present') == 'present'
          no_log: "{{ awx_nolog }}"
          tags:
            - templates
            - permissions

        - name: reverse workflow node order
          set_fact:
            _workflows: "{{ (_workflows | default([])) + [_workflow] }}"
          vars:
            _workflow: "{{ workflow | combine({ 'nodes': nodes }) }}"
            workflow: "{{ item }}"
            nodes: "{{ workflow.nodes | default([]) | reverse | list }}"
          loop_control:
            label: "{{ workflow.name }}"
          loop: "{{ _awx_workflows }}"
          when:
            - workflow.state | default('present') == 'present'
            - awx_workflow_manage | default('yes') | bool
            - workflow.manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - always

        - name: manage awx workflows
          workflow_job_template:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ workflow.name }}"
            organization: "{{ workflow.organization }}"
            inventory: "{{ workflow.inventory | default(omit) }}"
            description: "{{ workflow.description | default(omit) }}"
            ask_inventory_on_launch: "{{ workflow.ask_inventory | default(omit) }}"
            ask_limit_on_launch: "{{ workflow.ask_limit | default(omit) }}"
            ask_variables_on_launch: "{{ workflow.ask_extra_vars | default(omit) }}"
            destroy_current_schema: yes
            extra_vars: "{{ workflow.extra_vars | default(omit) }}"
            scm_branch: "{{ workflow.branch | default(omit) }}"
          loop_control:
            loop_var: workflow
            label: "{{ workflow.name }}"
          loop: "{{ _workflows | default([]) }}"
          no_log: "{{ awx_nolog }}"
          tags:
            - workflows

        - name: manage awx workflow nodes
          workflow_job_template_node:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            organization: "{{ workflow.organization }}"
            identifier: "{{ node.name }}"
            workflow_job_template: "{{ workflow.name }}"
            unified_job_template: "{{ node.template }}"
            inventory: "{{ (node.inventory | default(workflow.inventory) | default(omit)) if (node.inventory_manage | default('yes') | bool) else omit }}"
            limit: "{{ node.limit | default(omit) }}"
            job_tags: "{{ node.tags | default(omit) }}"
            skip_tags: "{{ node.skip_tags | default(omit) }}"
            extra_data: "{{ node.extra_data | default(omit) }}"
            credentials: "{{ (node.credentials | default(workflow.credentials) | default(omit)) if (node.credentials_manage | default('yes') | bool) else omit }}"
            success_nodes: "{{ [node.run_success | default([])] | flatten }}"
            always_nodes: "{{ [node.run_always | default([])] | flatten }}"
            failure_nodes: "{{ [node.run_failure | default([])] | flatten }}"
            all_parents_must_converge: yes
          vars:
            workflow: "{{ item.0 }}"
            node: "{{ item.1 }}"
          loop_control:
            label: "{{ workflow.name }} - {{ node.name }}"
          loop: "{{ _workflows | default([]) | subelements('nodes', skip_missing='yes') }}"
          no_log: "{{ awx_nolog }}"
          tags:
            - workflow_nodes
            - workflows

        - name: manage awx workflow permissions
          role:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            workflows:
              - "{{ workflow.name }}"
            team: "{{ permission.team }}"
            role: "{{ permission.role }}"
            state: "{{ permission.state | default('present') }}"
          vars:
            workflow: "{{ item.0 }}"
            permission: "{{ item.1 }}"
          loop_control:
            label: "{{ workflow.name }} - {{ permission.team}}"
          loop: "{{ _workflows | default([]) | subelements('permissions', skip_missing='yes') }}"
          no_log: "{{ awx_nolog }}"
          tags:
            - workflows
            - permissions

        - name: manage awx job schedules
          schedule:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            name: "{{ schedule.name }}"
            description: "{{ schedule.description | default(omit) }}"
            unified_job_template: "{{ schedule.job_template | default(omit) }}"
            inventory: "{{ schedule.inventory | default(omit) }}"
            enabled: "{{ schedule.enabled | default('yes') }}"
            rrule: "{{ schedule.rrule }}"
            state: absent
          vars:
            schedule: "{{ item }}"
          loop_control:
            label: "{{ schedule.name }}"
          loop: "{{ _awx_schedules }}"
          when:
            - schedule.state | default('present') != 'absent'
            - awx_schedule_manage | default('yes') | bool
          no_log: "{{ awx_nolog }}"
          tags:
            - schedules

        - name: manage awx users
          user:
            controller_host: "{{ awx_local_url | urlsplit('hostname') }}"
            controller_username: "{{ awx_admin_user | default('admin') }}"
            controller_password: "{{ awx_admin_pass }}"
            validate_certs: no
            username: "{{ item.username }}"
            password: "{{ item.password }}"
            first_name: "{{ item.first_name | default(omit) }}"
            last_name: "{{ item.last_name | default(omit) }}"
            email: "{{ item.email | default(omit) }}"
            is_superuser: "{{ item.superuser | default(omit) }}"
            state: "{{ item.state | default('present') }}"
          loop_control:
            label: "{{ item.username }}"
          loop: "{{ awx_users | default([]) | list }}"
          no_log: "{{ awx_nolog }}"
          tags:
            - users

      run_once: yes
