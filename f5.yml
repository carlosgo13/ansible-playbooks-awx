---
- name: Configure awx f5 proxy

  hosts: awx

  become: yes

  roles:

    - nephelaiio.plugins

  tasks:

    - name: include private variables
      include_vars:
        dir: "../{{ item }}"
      with_items: "{{ vaults }}"
      tags:
        - always

    - name: install f5-sdk
      pip:
        name:
          - f5-sdk
          - netaddr

    - name: create awx client ssl profiles
      bigip_profile_client_ssl:
        name: "client.{{ domain }}"
        cert_key_chain:
          - cert: "/Common/{{ domain }}.crt"
            key: "/Common/{{ domain }}.key"
            chain: "/Common/ca-bundle.crt"
        provider:
          server: "{{ f5_host }}"
          user: "{{ f5_user_name }}"
          password: "{{ f5_user_pass }}"
          transport: rest
          validate_certs: no
      vars:
        domain: "{{ (item | split_with('.') | list)[-2:] | join('.') }}"
      with_items:
        - "{{ awx_url_local | urlsplit('hostname') }}"

    - name: load irule contents
      set_fact:
        f5_irule_definitions: "{{ (f5_irule_definitions | default([])) + [irule_definition] }}"
      vars:
        partition: "{{ f5_partition }}"
        acls: "{{ f5_data_groups | combine(item.acls | default({})) }}"
        pools: "{{ f5_pools }}"
        irule_definition:
          name: "{{ item.name }}"
          content: "{{ lookup('template', item.template) }}"
          acls: "{{ (item.acls | default({})).values() }}"
      loop_control:
        label: "{{ item.name }}"
      with_items: "{{ f5_irules.values() }}"
      run_once: yes
      tags:
        - always

    - name: create standalone data groups
      bigip_data_group:
        name: "{{ acl.name }}"
        type: address
        internal: yes
        records: "{{ acl.records }}"
        partition: "{{ f5_partition }}"
        provider:
          server: "{{ f5_host }}"
          user: "{{ f5_user_name }}"
          password: "{{ f5_user_pass }}"
          transport: rest
          validate_certs: no
      vars:
        acl: "{{ item }}"
      loop_control:
        label: "{{ acl.name }}"
      with_items: "{{ f5_data_groups.values() }}"
      run_once: yes
      tags:
        - vs
        - irules

    - name: create irule data groups
      bigip_data_group:
        name: "{{ acl.name }}"
        type: address
        internal: yes
        records: "{{ acl.records }}"
        partition: "{{ f5_partition }}"
        provider:
          server: "{{ f5_host }}"
          user: "{{ f5_user_name }}"
          password: "{{ f5_user_pass }}"
          transport: rest
          validate_certs: no
      vars:
        irule: "{{ item.0 }}"
        acl: "{{ item.1 }}"
      loop_control:
        label: "{{ acl.name }}"
      with_subelements:
        - "{{ f5_irule_definitions }}"
        - acls
      run_once: yes
      tags:
        - vs
        - irules

    - name: create irules
      bigip_irule:
        content: "{{ item.content }}"
        module: ltm
        name: "{{ item.name }}"
        partition: "{{ f5_partition }}"
        provider:
          server: "{{ f5_host }}"
          user: "{{ f5_user_name }}"
          password: "{{ f5_user_pass }}"
          transport: rest
          validate_certs: no
      loop_control:
        label: "{{ item.name }}"
      with_items: "{{ f5_irule_definitions }}"
      run_once: yes
      tags:
        - irules
        - vs

    - name: create virtual servers
      bigip_virtual_server:
        name: "{{ item.name }}"
        type: standard
        ip_protocol: tcp
        destination: "{{ item.address }}"
        port: "{{ item.port }}"
        pool: "{{ item.pool }}"
        port_translation: yes
        snat: "{{ item.snat | default('automap') }}"
        partition: "{{ f5_partition }}"
        irules: "{{ item.irules | default([]) }}"
        profiles: "{{ item.profiles | default(default_profiles) }}"
        provider:
          server: "{{ f5_host }}"
          user: "{{ f5_user_name }}"
          password: "{{ f5_user_pass }}"
          transport: rest
          validate_certs: no
      vars:
        default_profiles:
          - /Common/http
      loop_control:
        pause: 1
        label: "{{ item.name }}"
      with_items: "{{ f5_vips.values() }}"
      run_once: yes
      tags:
        - vs
